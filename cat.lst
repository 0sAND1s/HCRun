# file opened: D:\Spectrum\src\HC\HCRun\cat.ASM
   1  0000              ;File listing program for HC
   2  0000              ;George Chirtoaca, george.chirtoaca(@)gmail(.)com, March 2022
   3  0000              ;
   4  0000              ;The purpose of this program is to have a fast file listing, that includes hidden files and also shows the file size and file attributes using colours on screen.
   5  0000              ;File selection will be possible with arrow keys, to select BASIC programs and run them, making it usefull as "run" program for auto-run on HC floppy disks. That's why it tries to be small and fast.
   6  0000              ;Reading the exact file size and file type requires opening up each file, which is slow, so it's not performed. The aproximate file size provided (rounded at 128 bytes) can be used as a hint to guess the file type.
   7  0000              ;Smaller files should be the BASIC loaders (around 256 bytes). SCREEN$ files are 7168 bytes. Larger files are code files usually. Files bigger than 64K are shown with file size in kilobytes.
   8  0000              ;Can display up to 128 files (max supported by HC BASIC file system), grouped in up to 3 pages, 44 files per page. Most disks will have one page listing, quickly showing up all disk info on one screen.
   9  0000              ;System calls are kept at minimum, because are slow. The aproximate file size is determined by processing all file dir entries and summing up the record count instead of calling the system call for file size determination.
  10  0000              ;Free space is determined by summing up file sizes on disk and substracting from maximum possible size (636KB). This allows showing up the ocupied space too, that the ROM doesn't list.
  11  0000              ;Another way to determine space would be to make the system call to get disk the allocation bitmap, but that bitmap is in "phantom RAM" (IF1 paged RAM) so it's more convoluted to read and process it (count set bits).
  12  0000              ;Would be probably faster to process the disk directory by reading the sectors and parsing manually, but that requires more code, and one objective was to have small and clear code. So system calls are used for Find First/Next.
  13  0000              ;Mathematical operations like multiplication and division are performed using bit shifts, since involve numbers that are power of 2. Again this is for having simple and small code.
  14  0000              ;Printing the text uses the BASIC ROM routine, that supports embedded color codes. The IF1 print routine doesn't support that. Direct screen output would be another way, but requires more code. Graphical output (64 columns) was excluded for the same reason.
  15  0000              ;ROM printing routing has an issue with line 21 (out of 0-23), so a trick is used to avoid scrolling: channel 0 is used for the stats printing, then lines 0-21 are printed on channel 2, also poking a variable to prevent scrolling.
  16  0000              ;What was used to develop this program:
  17  0000              ; - SjASMPlus v1.18.2 cross-assembler
  18  0000              ; - Crimson Editor for editing, launching assembler, deploying in emulator
  19  0000              ; - HC 2000 Emulator for Sinclair Spectrum +3 by Rares Atodiresei, for using the Spectaculator emulator with HC-2000 emulation support
  20  0000              ; - Spectaculator emulator, for using the debugger and it's other top quality features
  21  0000              ; - Fuse emulator, version from Alex Badea, with HC-2000 emulation support, for double testing
  22  0000              ; - HCDisk2 by myself, for creating/updating disk images for HC in DSK format.
  23  0000              ;
  24  0000              ;Motivation?
  25  0000              ; - I wanted to refresh my Z80 assembly language
  26  0000              ; - I wanted to create an usefull tool for HC computers, with features that don't exist yet
  27  0000              ; - I wanted to publish the code, in case it's usefull in understanding how HC computers disk system works
  28  0000              ;I realise some people may find it useless, but it's still a good exercise for myself and others.
  29  0000              ;
  30  0000              ;How it works:
  31  0000              ;1. Reads disk catalog and saves a line in a table for each file, with info from directory entry 0: file name, RC count.
  32  0000              ;2. Reads disk catalog again, to read the total record count for each file. This second pass is required because some files may have dir entry 1 show up before dir entry 0.
  33  0000              ;3. Calculates disk space used by files, based on cache table record count, rounding up to 2048 (block size).
  34  0000              ;4. Displays total used space on disk, file count, disk free space, listing page 1/2/3.
  35  0000              ;5. Displays file list and file size in bytes, rounded up at 128 (CPM style). File attributes are shown in color, as noted on screen: red=read only, magenta=system (hidden from CAT), yellow=read only + system.
  36  0000
  37  0000              				DEVICE ZXSPECTRUM48
  38  0000
  39  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Main program ;;;;;;;;;;;;;;;;;;;;;;;;;;
  40  0000              	ORG START_ADDR
  41  8000
  42  8000              start:
  43  8000              	;Init IF1, disk, variables
  44  8000 CD 2A 80     	call Init
  45  8003              ReadDiskAgain:
  46  8003              	;First read of catalog, to get file list
  47  8003 CD 78 82     	call ReadCatalog1
  48  8006              	;Second read of catalog, to get file size
  49  8006 CD CC 82     	call ReadCatalog2
  50  8009              	;Calculate space used by files on disk
  51  8009 CD A7 80     	call GetDiskUsedSpace
  52  800C              	;Display list of files
  53  800C CD 15 81     	call DisplayFiles
  54  800F
  55  800F C9           	ret
  56  8010
  57  8010              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Char routines ;;;;;;;;;;;;;;;;;;;;;;;;;
  58  8010
  59  8010
  60  8010              ;Return read char in A
  61  8010              ReadChar:
  62  8010 CF           	rst 08
  63  8011 1B           	DEFB 27
  64  8012 C9           	ret
  65  8013
  66  8013              ;Print a string
  67  8013              ;HL=str. addr.
  68  8013              ;B=len
  69  8013              PrintStr:
  70  8013 7E           	ld a, (hl)
  71  8014 E5           	push hl
  72  8015 C5           	push bc
  73  8016 D7           		rst $10				;Print using ROM routine, since it supports color output. The IF1 print routine doesn't.
  74  8017 C1           	pop bc
  75  8018 E1           	pop hl
  76  8019 23           	inc hl
  77  801A 10 F7        	djnz PrintStr
  78  801C C9           	ret
  79  801D
  80  801D
  81  801D              ;Compare string at HL with the one at DE, max length B
  82  801D              ;IN: HL, DE = addr. of strings to compare, B = max. length of strings to compare
  83  801D              ;OUT: z flag, set = match, reset = mismatch
  84  801D              StrCmp:
  85  801D E5           	push hl
  86  801E D5           	push de
  87  801F              Compare:
  88  801F 1A           		ld a, (de)
  89  8020 BE           		cp (hl)
  90  8021 20 04        		jr nz, MisMatch
  91  8023 23           		inc hl
  92  8024 13           		inc de
  93  8025 10 F8        		djnz Compare
  94  8027              MisMatch:
  95  8027 D1           	pop de
  96  8028 E1           	pop hl
  97  8029 C9           	ret
  98  802A
  99  802A              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 100  802A
 101  802A              Init:
 102  802A              ;These 2 calls are not needed when this program is launched from disk, as it will display the current disk.
 103  802A              ;If loaded from tape, it won't work without the 2 calls, since they are needed for DOS initialisation and selecting A: or B:.
 104  802A CD 50 80     	call InitVars
 105  802D
 106  802D              	;Select the current drive to work with instead of hardcoding A:.
 107  802D CD 8C 80     	call GetCurrentDrive
 108  8030 FE FF        	cp $FF							;$FF = no current drive, forca A:
 109  8032 28 03        	jr  z, CurrentDriveNone
 110  8034 3C           	inc  a							;translate CP/M drive to BASIC drive: 0 -> 1, 1 -> 2
 111  8035 18 02        	jr  SelectDriveInit
 112  8037              CurrentDriveNone:
 113  8037 3E 01        	ld  a, DRIVE_A
 114  8039              SelectDriveInit:
 115  8039 CD 7E 80     	call SelectDrive
 116  803C
 117  803C AF           	xor a
 118  803D 6F           	ld l, a
 119  803E 67           	ld h, a
 120  803F 22 4D 84     	ld (UsedKB), hl					;reset used blocks
 121  8042 32 4C 84     	ld (FileCnt), a					;reset file counter
 122  8045 3E 80        	ld  a, MAX_DIR_ENT
 123  8047 32 4F 84     	ld (FreeCatalog), a
 124  804A
 125  804A              	;CLS
 126  804A 3E 02        	ld  a, 2
 127  804C CD AF 0D     	call ROM_OPEN_SCR_CLR
 128  804F
 129  804F C9           	ret
 130  8050
 131  8050              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Disk routines ;;;;;;;;;;;;;;;;;;;;;;;;;
 132  8050
 133  8050              ;Insert IF1 variables
 134  8050              InitVars:
 135  8050 CF           	rst 08
 136  8051 31           	DEFB 49
 137  8052 C9           	ret
 138  8053
 139  8053              ;Create a disk channel for BDOS access (does not open the file)
 140  8053              ;IN: HL=name addr, B=drive, C=name len
 141  8053              ;OUT: IX=FCB
 142  8053              CreateChannel:
 143  8053 22 DC 5C     	ld (VAR_FSTR1), hl
 144  8056 26 00        	ld h,0
 145  8058 68           	ld l,b
 146  8059 22 D6 5C     	ld (VAR_DSTR1), hl
 147  805C 69           	ld l,c
 148  805D 22 DA 5C     	ld (VAR_NSTR1), hl
 149  8060 CF           	rst 08
 150  8061 37           	DEFB 55
 151  8062 01 0C 00     	ld bc, CH_FCB			;adjust to get cp/m fcb
 152  8065 DD 09        	add ix, bc
 153  8067 C9           	ret
 154  8068
 155  8068
 156  8068              ;Destroy a BDOS channel
 157  8068              ;IN: IX=FCB
 158  8068              DestroyChannel:
 159  8068 01 F4 FF     	ld bc, -CH_FCB			;adjust to get the basic channel
 160  806B DD 09        	add ix, bc
 161  806D CF           	rst 08
 162  806E 38           	DEFB 56
 163  806F C9           	ret
 164  8070
 165  8070
 166  8070              ;Generic BDOS call
 167  8070              ;IX=arg, A=function
 168  8070              BDOS:
 169  8070 DD 22 ED 5C  	ld (VAR_HD11), ix
 170  8074 32 EF 5C     	ld (VAR_COPIES), a
 171  8077 CF           	rst 08
 172  8078 39           	DEFB 57
 173  8079 C9           	ret
 174  807A
 175  807A              InitDos:
 176  807A 3E 00        	ld	a, 0
 177  807C 18 F2        	jr	BDOS
 178  807E
 179  807E              ;IN A=selected drive
 180  807E              SelectDrive:
 181  807E 32 4B 84     	ld  (DRIVE_SELECTED), a
 182  8081 3D           	dec a		;CPM drive is 0=A or 1=B. For BASIC is 1=A, 2=B, 0=current drive. So we must convert it for the CPM call, otherwise the BDOS function crashes.
 183  8082 DD 26 00     	ld  ixh, 0
 184  8085 DD 6F        	ld	ixl, a	;0=A, 1=B
 185  8087 3E 01        	ld	a, 1	;1=Select disk
 186  8089 18 E5        	jr	BDOS
 187  808B C9           	ret
 188  808C
 189  808C              ;Returns current disk in A: 0=A:, 1=B:, $FF=no current drive
 190  808C              GetCurrentDrive:
 191  808C 3E 0C        	ld a, 12
 192  808E 18 E0        	jr BDOS
 193  8090
 194  8090              ;FindFirst
 195  8090              ;IX=fcb
 196  8090              FindFirst:
 197  8090 3E 04        	ld a, 4
 198  8092 18 DC        	jr BDOS
 199  8094
 200  8094
 201  8094              ;FindNext
 202  8094              ;IX=fcb
 203  8094              FindNext:
 204  8094 3E 05        	ld a, 5
 205  8096 18 D8        	jr BDOS
 206  8098
 207  8098
 208  8098              ;Set DMA address for BDOS into the already alocated (and unused) 256 bytes channel buffer
 209  8098              ;IX=fcb
 210  8098              SetDMA:
 211  8098 01 26 00     	ld bc, CH_DMA		;offset into alocated data area of the channel (256 bytes)
 212  809B DD E5        	push ix
 213  809D DD 09        		add ix, bc
 214  809F 3E 0D        		ld a, 13
 215  80A1 CD 70 80     		call BDOS
 216  80A4 DD E1        	pop ix
 217  80A6 C9           	ret
 218  80A7
 219  80A7
 220  80A7              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 221  80A7
 222  80A7              ;Sum up file size on disk for all files. It's easier than parsing the block bitmap in phantom RAM.
 223  80A7              GetDiskUsedSpace:
 224  80A7 21 50 84     	ld		hl, Cache
 225  80AA 3A 4C 84     	ld		a, (FileCnt)
 226  80AD 47           	ld		b, a
 227  80AE
 228  80AE              FileSizeLoop:
 229  80AE C5           	push	bc
 230  80AF 01 0B 00     		ld		bc, NAMELEN
 231  80B2 09           		add		hl, bc
 232  80B3
 233  80B3 4E           		ld		c, (hl)
 234  80B4 23           		inc		hl
 235  80B5 46           		ld		b, (hl)
 236  80B6 23           		inc		hl
 237  80B7
 238  80B7 E5           		push	hl
 239  80B8 C5           			push	bc
 240  80B9 E1           			pop		hl
 241  80BA CD CA 80     			call	GetFileSizeOnDiskKB
 242  80BD
 243  80BD ED 4B 4D 84  			ld		bc, (UsedKB)
 244  80C1 09           			add		hl, bc
 245  80C2 22 4D 84     			ld		(UsedKB), hl
 246  80C5 E1           		pop		hl
 247  80C6 C1           	pop		bc
 248  80C7 10 E5        	djnz	FileSizeLoop
 249  80C9 C9           	ret
 250  80CA
 251  80CA
 252  80CA              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 253  80CA
 254  80CA              ;IN HL=RC count
 255  80CA              ;OUT HL = File size on disk in KB
 256  80CA              ;(RC count * 128) / 2048 = RC count * 16 = block count. Block count * 2 = KB on disk
 257  80CA              GetFileSizeOnDiskKB:
 258  80CA AF           	xor a
 259  80CB
 260  80CB              	;/2
 261  80CB CB 3C        	srl	h
 262  80CD CB 1D        	rr	l
 263  80CF 17           	rla
 264  80D0              	;/4
 265  80D0 CB 3C        	srl	h
 266  80D2 CB 1D        	rr	l
 267  80D4 17           	rla
 268  80D5              	;/8
 269  80D5 CB 3C        	srl	h
 270  80D7 CB 1D        	rr	l
 271  80D9 17           	rla
 272  80DA              	;/16
 273  80DA CB 3C        	srl	h
 274  80DC CB 1D        	rr	l
 275  80DE 17           	rla
 276  80DF
 277  80DF B7           	or  a
 278  80E0 28 01        	jr  z, NoPartialAU
 279  80E2 23           	inc	hl
 280  80E3              NoPartialAU:
 281  80E3
 282  80E3              	;block count * 2 = KB
 283  80E3 CB 25        	sla	l
 284  80E5 CB 14        	rl	h
 285  80E7 C9           	ret
 286  80E8
 287  80E8              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 288  80E8
 289  80E8              ;IN HL = RC count
 290  80E8              DisplayFileLength:
 291  80E8              	;check if RC >= $200 RC, to display size in KB then, as it doesn't fit in 16 bits.
 292  80E8 3E 02        	ld  a, 2
 293  80EA 94           	sub h
 294  80EB 38 16        	jr  c, BigFile
 295  80ED
 296  80ED              	;RC * 128 = size in bytes rounded at 128.
 297  80ED              	;h << 7
 298  80ED CB 0C        	rrc h
 299  80EF              	;l >> 1
 300  80EF CB 3D        	srl l
 301  80F1              	;save carry	in H
 302  80F1 CB 1C        	rr h
 303  80F3              	;save L
 304  80F3 7D           	ld  a, l
 305  80F4 2E 00        	ld  l, 0
 306  80F6              	;save bit 7 of L
 307  80F6 CB 14        	rl h
 308  80F8 CB 1D        	rr l
 309  80FA              	;save H + 7 bits of L
 310  80FA B4           	or  h
 311  80FB 67           	ld  h, a
 312  80FC
 313  80FC 11 3B 84     	ld  de, FileLen
 314  80FF CD 8C 83     	call N2ASCII5
 315  8102
 316  8102 C9           	ret
 317  8103
 318  8103              BigFile:
 319  8103 CD CA 80     	call GetFileSizeOnDiskKB
 320  8106
 321  8106 11 3B 84     	ld  de, FileLen
 322  8109 CD 82 83     	call N2ASCII3
 323  810C 13           	inc  de
 324  810D 3E 4B        	ld  a, 'K'
 325  810F 12           	ld  (de), a
 326  8110 13           	inc de
 327  8111 3E 42        	ld  a, 'B'
 328  8113 12           	ld  (de), a
 329  8114
 330  8114 C9           	ret
 331  8115
 332  8115              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 333  8115              DisplayFiles:
 334  8115 3E 31        	ld  a, '1'
 335  8117 32 D9 83     	ld  (ScrPageMsg), a
 336  811A 32 DB 83     	ld  (ScrPageMsgMax), a
 337  811D
 338  811D 3A 4C 84     	ld a, (FileCnt)
 339  8120 B7           	or a
 340  8121 20 07        	jr  nz, NonEmptyDisk
 341  8123 CD 3D 83     	call DisplayStats
 342  8126 CD 10 80     	call ReadChar
 343  8129 C9           	ret
 344  812A
 345  812A              NonEmptyDisk:
 346  812A              	;detemine how many file list pages we have (1-3)
 347  812A 21 DB 83     	ld hl, ScrPageMsgMax
 348  812D              ScreenCntLoop:
 349  812D D6 2C        	sub MAX_FILES_SCR
 350  812F 34           	inc (hl)
 351  8130 30 FB        	jr  nc, ScreenCntLoop
 352  8132 35           	dec (hl)
 353  8133
 354  8133              DisplayFilesLoop:
 355  8133 AF           	xor a
 356  8134 32 26 84     	ld (TabChar), a
 357  8137
 358  8137 32 2B 84     	ld (DisplayedBright), a
 359  813A
 360  813A CD 85 81     	call GetFileListForScreen
 361  813D CD DF 81     	call DisplayOneScreen
 362  8140
 363  8140              ReadCharLoop:
 364  8140 CD 10 80     	call ReadChar
 365  8143 FE 07        	cp  KEY_ESC
 366  8145 C8           	ret z
 367  8146 FE 0A        	cp  KEY_DOWN
 368  8148 28 23        	jr  z, NextScr
 369  814A FE 0B        	cp  KEY_UP
 370  814C 28 2C        	jr  z, PrevScr
 371  814E FE 09        	cp  KEY_RIGHT
 372  8150 28 1B        	jr  z, NextScr
 373  8152 FE 08        	cp  KEY_LEFT
 374  8154 28 24        	jr  z, PrevScr
 375  8156 FE 31        	cp  '1'
 376  8158 28 06        	jr  z, SelectDriveA
 377  815A FE 32        	cp  '2'
 378  815C 28 06        	jr  z, SelectDriveB
 379  815E 18 E0        	jr  ReadCharLoop
 380  8160
 381  8160
 382  8160              SelectDriveA:
 383  8160 3E 01        	ld  a, DRIVE_A
 384  8162 18 02        	jr  SwitchDrive
 385  8164              SelectDriveB:
 386  8164 3E 02        	ld  a, DRIVE_B
 387  8166              SwitchDrive:
 388  8166 CD 7E 80     	call SelectDrive
 389  8169 E1           	pop  hl							;restore stack for this call
 390  816A C3 00 80     	jp   start
 391  816D
 392  816D              NextScr:
 393  816D 21 D9 83     	ld hl, ScrPageMsg
 394  8170 3A DB 83     	ld a, (ScrPageMsgMax)
 395  8173 34           	inc (hl)
 396  8174 BE           	cp (hl)
 397  8175 30 BC        	jr  nc,DisplayFilesLoop
 398  8177 77           	ld (hl), a
 399  8178 18 C6        	jr  ReadCharLoop
 400  817A
 401  817A              PrevScr:
 402  817A 21 D9 83     	ld hl, ScrPageMsg
 403  817D 3E 31        	ld  a, '1'
 404  817F BE           	cp (hl)
 405  8180 28 BE        	jr  z, ReadCharLoop
 406  8182 35           	dec (hl)
 407  8183 18 AE        	jr  DisplayFilesLoop
 408  8185
 409  8185
 410  8185              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 411  8185              ;Determine the cache line to start with (in HL) and how many files to show (in B)
 412  8185              ;page1 = files 1-44, page2 = files 45 - 88, page3 = 89 - 128
 413  8185              GetFileListForScreen:
 414  8185 3A 4C 84     	ld  a, (FileCnt)
 415  8188 4F           	ld  c, a
 416  8189 3A D9 83     	ld  a, (ScrPageMsg)
 417  818C 5F           	ld  e, a
 418  818D 3A DB 83     	ld a, (ScrPageMsgMax)
 419  8190 FE 31        	cp '1'
 420  8192 28 08        	jr  z, OneScreenMax
 421  8194 FE 32        	cp '2'
 422  8196 28 08        	jr  z, TwoScreensMax
 423  8198 FE 33        	cp '3'
 424  819A 28 17        	jr  z, ThreeScreensMax
 425  819C
 426  819C              ;determine file list offset for file list on screen and file count for
 427  819C              OneScreenMax:
 428  819C 06 00        	ld  b, 0
 429  819E 18 30        	jr 	FindCacheLine
 430  81A0              TwoScreensMax:
 431  81A0 7B           	ld  a, e
 432  81A1 FE 32        	cp  '2'
 433  81A3 28 06        	jr  z, Page2of2
 434  81A5              Page1of2:
 435  81A5 06 00        	ld  b, 0					;start from first file for page 1
 436  81A7 0E 2C        	ld  c, MAX_FILES_SCR		;display full screen of files, more to come
 437  81A9 18 25        	jr  FindCacheLine
 438  81AB              Page2of2:
 439  81AB 06 2C        	ld  b, MAX_FILES_SCR		;skip first page of files for page 2
 440  81AD 79           	ld  a, c
 441  81AE D6 2C        	sub MAX_FILES_SCR
 442  81B0 4F           	ld  c, a					;get rest of files for page 2
 443  81B1 18 1D        	jr 	FindCacheLine
 444  81B3              ThreeScreensMax:
 445  81B3 7B           	ld  a, e
 446  81B4 FE 33        	cp  '3'
 447  81B6 28 10        	jr  z, Page3of3
 448  81B8 FE 32        	cp  '2'
 449  81BA 28 06        	jr  z, Page2of3
 450  81BC              Page1of3:
 451  81BC 06 00        	ld  b, 0					;start from first file for page 1
 452  81BE 0E 2C        	ld  c, MAX_FILES_SCR		;display full page of files, more to come
 453  81C0 18 0E        	jr  FindCacheLine
 454  81C2              Page2of3:
 455  81C2 06 2C        	ld  b, MAX_FILES_SCR		;skip first page of files for page 2
 456  81C4 0E 2C        	ld  c, MAX_FILES_SCR		;display full page of files, more to come
 457  81C6 18 08        	jr  FindCacheLine
 458  81C8              Page3of3:
 459  81C8 06 58        	ld  b, 2*MAX_FILES_SCR		;skip first 2 pages of files for page 3
 460  81CA 79           	ld  a, c
 461  81CB D6 2C        	sub MAX_FILES_SCR
 462  81CD D6 2C        	sub MAX_FILES_SCR
 463  81CF 4F           	ld  c, a					;get rest of files for page 2
 464  81D0
 465  81D0              FindCacheLine:
 466  81D0 11 0D 00     	ld	de, CACHE_LN_SZ
 467  81D3 21 50 84     	ld 	hl, Cache
 468  81D6 78           	ld  a, b
 469  81D7 B7           	or  a
 470  81D8 28 03        	jr  z, ListReady
 471  81DA              FindCacheLineLoop:
 472  81DA 19           	add	hl, de
 473  81DB 10 FD        	djnz FindCacheLineLoop
 474  81DD
 475  81DD              ListReady:
 476  81DD 41           	ld  b, c
 477  81DE
 478  81DE C9           	ret
 479  81DF
 480  81DF              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 481  81DF              ;Shows file lists for one screen, with cache from HL and file count from B
 482  81DF              DisplayOneScreen:
 483  81DF C5           	push	bc
 484  81E0 E5           	push	hl
 485  81E1 3E 02        		ld  a, 2
 486  81E3 CD AF 0D     		call ROM_OPEN_SCR_CLR
 487  81E6              		;Display occupied space, file number, free space, page
 488  81E6 CD 3D 83     		call DisplayStats
 489  81E9 E1           	pop		hl
 490  81EA C1           	pop		bc
 491  81EB
 492  81EB C5           	push 	bc
 493  81EC E5           	push 	hl
 494  81ED CD F3 81     		call DisplayFilesInfo
 495  81F0 E1           	pop	 hl
 496  81F1 C1           	pop  bc
 497  81F2
 498  81F2 C9           	ret
 499  81F3
 500  81F3
 501  81F3              ;Displays info for each file. A table already contains lines of: FileName, RC count
 502  81F3              ;IN HL=file cache line, B=file count
 503  81F3              DisplayFilesInfo:
 504  81F3 E5           	push hl
 505  81F4 3E 02        	ld  a, 2
 506  81F6 CD 01 16     	call ROM_OPEN_SCR
 507  81F9 E1           	pop	hl
 508  81FA              	;prevent scroll up, to be able to display on row 21
 509  81FA AF           	xor a
 510  81FB 32 6B 5C     	ld  (VAR_SCROLL2), a
 511  81FE
 512  81FE              	;return if 0 files on disk
 513  81FE 78           	ld a, b
 514  81FF B7           	or a
 515  8200 C8           	ret z
 516  8201              DisplayLoop:
 517  8201 C5           	push bc
 518  8202 E5           	push hl
 519  8203              		;set file name for display
 520  8203 11 2E 84     		ld   de, FileName
 521  8206 D5           		push de
 522  8207 01 0B 00     			ld	 bc, NAMELEN
 523  820A ED B0        			ldir
 524  820C
 525  820C 4E 23 46 2B  			ld  bc, (hl)
 526  8210 69           			ld  l, c
 527  8211 60           			ld  h, b
 528  8212 CD E8 80     			call DisplayFileLength
 529  8215 DD E1        		pop  ix
 530  8217
 531  8217 CD 52 82     		call CheckAttributes
 532  821A
 533  821A              		;fix invalid chars in name
 534  821A 06 0B        		ld  b, NAMELEN
 535  821C 21 2E 84     		ld  hl, FileName
 536  821F              FileNameCopy:
 537  821F 7E           		ld  a, (hl)
 538  8220 E6 7F        		and $7F									;clear bit 7; LOAD accepts bit 7 set or not (char SCREEN$ or *)
 539  8222 FE 20        		cp  ' '
 540  8224 30 02        		jr  nc, GoodChar
 541  8226 3E 3F        		ld  a, '?'
 542  8228              GoodChar:
 543  8228 77           		ld  (hl), a
 544  8229 23           		inc  hl
 545  822A 10 F3        		djnz FileNameCopy
 546  822C
 547  822C              		;display line
 548  822C 21 25 84     		ld hl, DisplayedLine
 549  822F 06 1B        		ld b, DisplayedLineEnd-DisplayedLine	;how many chars on one line
 550  8231 CD 13 80     		call PrintStr
 551  8234
 552  8234              		;set tab every 2 entries
 553  8234 3A 26 84     		ld a, (TabChar)
 554  8237 EE 10        		xor 16
 555  8239 32 26 84     		ld (TabChar), a
 556  823C E1           	pop hl
 557  823D 01 0D 00     	ld  bc, CACHE_LN_SZ
 558  8240 09           	add hl, bc
 559  8241 C1           	pop bc
 560  8242
 561  8242              	;set alternating bright every 2 entries
 562  8242 78           	ld a, b
 563  8243 E6 02        	and 2
 564  8245 CB 3F        	srl a
 565  8247 32 2B 84     	ld (DisplayedBright), a
 566  824A 10 B5        	djnz DisplayLoop
 567  824C
 568  824C              	;restore scroll, to prevent crash
 569  824C 21 6B 5C     	ld  hl, VAR_SCROLL2
 570  824F 36 02        	ld  (hl), 2
 571  8251 C9           	ret
 572  8252
 573  8252
 574  8252              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 575  8252
 576  8252              ;Checks the attributes and reset the bits, saving result as color attribute
 577  8252              ;IX=file name
 578  8252              CheckAttributes:
 579  8252 3E 05        	ld  a, CLR_NAME
 580  8254 DD CB 08 7E  	bit 7, (ix+ATTR_RO_POS)
 581  8258 28 06        	jr  z, NotRO
 582  825A DD CB 08 BE  	res 7, (ix+ATTR_RO_POS)
 583  825E 3E 02        	ld  a, CLR_RO
 584  8260              NotRO:
 585  8260 DD CB 09 7E  	bit 7, (ix+ATTR_SYS_POS)
 586  8264 28 0E        	jr  z, NotSys
 587  8266 DD CB 09 BE  	res 7, (ix+ATTR_SYS_POS)
 588  826A FE 02        	cp  CLR_RO
 589  826C 28 04        	jr  z, BothAttr
 590  826E 3E 03        	ld  a, CLR_SYS
 591  8270 18 02        	jr  NotSys
 592  8272              BothAttr:
 593  8272 3E 04        	ld  a, CLR_RO_SYS
 594  8274              NotSys:
 595  8274 32 2D 84     	ld (FileNameClr), a
 596  8277 C9           	ret
 597  8278
 598  8278
 599  8278              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 600  8278
 601  8278              ;Read directory and create a table (name - 11B, RC count - 2B)
 602  8278              ReadCatalog1:
 603  8278 21 40 84     	ld hl, FileMask
 604  827B 3A 4B 84     	ld a, (DRIVE_SELECTED)
 605  827E 47           	ld b, a							;drive
 606  827F 0E 0B        	ld c, NAMELEN					;name len
 607  8281 CD 53 80     	call CreateChannel
 608  8284 CD 98 80     	call SetDMA
 609  8287
 610  8287 3E 00        	ld	a, 0						;request first extension
 611  8289 DD 77 0C     	ld (ix + FCB_EX_IDX), a
 612  828C
 613  828C CD 90 80     	call FindFirst
 614  828F 11 50 84     	ld de, Cache
 615  8292
 616  8292              CatNext:
 617  8292 3C           	inc a
 618  8293 28 33        	jr z, CatEnd			;return if A=FFh
 619  8295 3D           	dec a
 620  8296
 621  8296 DD E5        	push ix
 622  8298 01 26 00     		ld bc, CH_DMA
 623  829B DD 09        		add ix, bc
 624  829D
 625  829D              		;A is the index for the 32 byte dir. entry in DMA buffer
 626  829D 17           		rla
 627  829E 17           		rla
 628  829F 17           		rla
 629  82A0 17           		rla
 630  82A1 17           		rla
 631  82A2 06 00        		ld b, 0
 632  82A4 4F           		ld c, a
 633  82A5 DD 09        		add ix, bc						;hl=file name -1=FCB
 634  82A7
 635  82A7              		;put name in cache
 636  82A7 DD E5        		push ix
 637  82A9 E1           		pop hl
 638  82AA 23           		inc hl						;HL = file name
 639  82AB 01 0B 00     		ld  bc, NAMELEN
 640  82AE ED B0        		ldir
 641  82B0
 642  82B0              		;skip EX, S1, S2
 643  82B0 23           		inc hl
 644  82B1 23           		inc hl
 645  82B2 23           		inc hl
 646  82B3              		;save RC count for first extension
 647  82B3 ED A0        		ldi
 648  82B5 AF           		xor a
 649  82B6 12           		ld (de), a
 650  82B7 13           		inc de
 651  82B8 DD E1        	pop  ix
 652  82BA
 653  82BA 3A 4C 84     	ld a, (FileCnt)
 654  82BD 3C           	inc a
 655  82BE 32 4C 84     	ld (FileCnt), a
 656  82C1
 657  82C1              	;find next file
 658  82C1 D5           	push de
 659  82C2 CD 94 80     		call FindNext
 660  82C5 D1           	pop de
 661  82C6
 662  82C6 18 CA        	jr CatNext
 663  82C8              CatEnd:
 664  82C8
 665  82C8 CD 68 80     	call DestroyChannel
 666  82CB C9           	ret
 667  82CC
 668  82CC
 669  82CC              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 670  82CC              ;Will ignore extensions with index 0, will add up RC count for subsequent extensions.
 671  82CC              ReadCatalog2:
 672  82CC 21 40 84     	ld hl, FileMask
 673  82CF 3A 4B 84     	ld a, (DRIVE_SELECTED)
 674  82D2 47           	ld b, a							;drive
 675  82D3 0E 0B        	ld c, NAMELEN					;name len
 676  82D5 CD 53 80     	call CreateChannel
 677  82D8 CD 98 80     	call SetDMA
 678  82DB
 679  82DB 3E 3F        	ld	a, '?'						;request all extensions
 680  82DD DD 77 0C     	ld (ix + FCB_EX_IDX), a
 681  82E0
 682  82E0 CD 90 80     	call FindFirst
 683  82E3
 684  82E3              CatNext2:
 685  82E3 3C           	inc a
 686  82E4 28 3E        	jr z, CatEnd2			;return if A=FFh
 687  82E6 3D           	dec a
 688  82E7
 689  82E7 21 4F 84     	ld hl, FreeCatalog
 690  82EA 35           	dec (hl)
 691  82EB
 692  82EB DD E5        	push ix
 693  82ED 01 26 00     		ld bc, CH_DMA
 694  82F0 DD 09        		add ix, bc
 695  82F2
 696  82F2              		;A is the index for the 32 byte dir. entry in DMA buffer
 697  82F2 17           		rla
 698  82F3 17           		rla
 699  82F4 17           		rla
 700  82F5 17           		rla
 701  82F6 17           		rla
 702  82F7 06 00        		ld b, 0
 703  82F9 4F           		ld c, a
 704  82FA DD 09        		add ix, bc						;hl=file name -1=FCB
 705  82FC
 706  82FC              		;now ignore entries with index 0, as these are already processed
 707  82FC DD 7E 0C     		ld  a, (ix + FCB_EX_IDX)
 708  82FF B7           		or  a
 709  8300 28 1B        		jr  z, Cat2Index0
 710  8302
 711  8302              		;find cache for this file
 712  8302 DD E5        		push ix
 713  8304 E1           		pop  hl
 714  8305 23           		inc  hl
 715  8306 CD 28 83     		call FindCache
 716  8309
 717  8309 EB           		ex  de, hl
 718  830A 01 0B 00     		ld  bc, NAMELEN
 719  830D 09           		add hl, bc
 720  830E
 721  830E              		;add RC count in cache
 722  830E 4E           		ld  c, (hl)
 723  830F 23           		inc hl
 724  8310 46           		ld  b, (hl)
 725  8311 2B           		dec hl
 726  8312 EB           		ex  de, hl
 727  8313 DD 6E 0F     		ld  l, (ix + FCB_RC)
 728  8316 26 00        		ld  h, 0
 729  8318 09           		add hl, bc
 730  8319 EB           		ex  de, hl
 731  831A 73           		ld  (hl), e
 732  831B 23           		inc hl
 733  831C 72           		ld  (hl), d
 734  831D              Cat2Index0:
 735  831D DD E1        	pop  ix
 736  831F
 737  831F CD 94 80     	call FindNext
 738  8322
 739  8322 18 BF        	jr CatNext2
 740  8324              CatEnd2:
 741  8324
 742  8324 CD 68 80     	call DestroyChannel
 743  8327 C9           	ret
 744  8328
 745  8328              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 746  8328              ;IN HL = name address
 747  8328              ;OUT DE = file row in cache
 748  8328              FindCache:
 749  8328 11 50 84     	ld  de, Cache
 750  832B
 751  832B              FindCacheLoop:
 752  832B E5           	push hl
 753  832C D5           	push de
 754  832D 06 0B        		ld  b, NAMELEN
 755  832F CD 1D 80     		call StrCmp
 756  8332 D1           	pop  de
 757  8333 E1           	pop  hl
 758  8334 C8           	ret z
 759  8335
 760  8335              	;skip RC count in cache
 761  8335 EB           	ex  de, hl
 762  8336 01 0D 00     	ld  bc, CACHE_LN_SZ
 763  8339 09           	add hl, bc
 764  833A EB           	ex  de, hl
 765  833B 18 EE        	jr  FindCacheLoop
 766  833D
 767  833D
 768  833D              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 769  833D
 770  833D              ;Displays free space
 771  833D              DisplayStats:
 772  833D 2A 4D 84     	ld   hl, (UsedKB)
 773  8340 E5           	push hl
 774  8341 11 06 84     		ld de, UsedSpaceAsc
 775  8344 CD 82 83     		call N2ASCII3
 776  8347 C1           	pop  bc
 777  8348
 778  8348 21 7C 02     	ld  hl, (MAX_FREE_AU_CNT * AU_SZ)/1024
 779  834B B7 ED 42     	sub hl, bc
 780  834E 11 18 84     	ld de, FreeSpaceAsc
 781  8351 CD 82 83     	call N2ASCII3
 782  8354
 783  8354 3A 4C 84     	ld a, (FileCnt)
 784  8357 26 00        	ld h, 0
 785  8359 6F           	ld l, a
 786  835A 11 0C 84     	ld de, FileCntMsg
 787  835D CD 82 83     	call N2ASCII3
 788  8360
 789  8360 3A 4B 84     	ld  a, (DRIVE_SELECTED)
 790  8363 C6 40        	add 'A'-1
 791  8365 32 01 84     	ld  (MsgDrive), a
 792  8368
 793  8368 3A 4F 84     	ld a, (FreeCatalog)
 794  836B 6F           	ld l, a
 795  836C 26 00        	ld h, 0
 796  836E 11 1E 84     	ld de, UsedCatMsg
 797  8371 CD 82 83     	call N2ASCII3
 798  8374
 799  8374              PrintStats:
 800  8374 3E 00        	ld	a, 0
 801  8376 CD 01 16     	call ROM_OPEN_SCR
 802  8379 21 CD 83     	ld hl, FreeSpaceMsg
 803  837C 06 58        	ld b, FreeSpaceMsgEnd - FreeSpaceMsg
 804  837E CD 13 80     	call PrintStr
 805  8381 C9           	ret
 806  8382
 807  8382
 808  8382              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Number routines ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 809  8382
 810  8382              ;Converts the 3 digit number in HL to ASCII at DE
 811  8382              N2ASCII3:
 812  8382 D5           	push de
 813  8383 CD B3 83     		call N2ASCII_DEC3
 814  8386 D1           	pop de
 815  8387 01 00 02     	ld  bc, $0200
 816  838A 18 08        	jr StrippLoop
 817  838C
 818  838C              ;Converts the 5 digit number in HL to ASCII
 819  838C              N2ASCII5:
 820  838C D5           	push de
 821  838D CD A7 83     		call N2ASCII_DEC
 822  8390 D1           	pop de
 823  8391
 824  8391              StrippLeading0:
 825  8391 01 00 04     	ld bc, $0400
 826  8394              	;ld c, 0
 827  8394              StrippLoop:
 828  8394 1A           	ld a, (de)
 829  8395 FE 30        	cp '0'
 830  8397 20 09        	jr nz, MarkNon0
 831  8399 79           	ld a, c
 832  839A              	;cp 0
 833  839A B7           	or a
 834  839B 20 06        	jr nz, NextChar
 835  839D 3E 20        	ld a, ' '
 836  839F 12           	ld (de), a
 837  83A0 18 01        	jr NextChar
 838  83A2              MarkNon0:
 839  83A2 0C           	inc c
 840  83A3              NextChar:
 841  83A3 13           	inc de
 842  83A4 10 EE        	djnz StrippLoop
 843  83A6 C9           	ret
 844  83A7
 845  83A7
 846  83A7              ;The folowing routine was inspired from: Milos "baze" Bazelides, baze@stonline.sk
 847  83A7              ;http://map.tni.nl/sources/external/z80bits.html
 848  83A7
 849  83A7              ;Converts the number in HL to ASCII in decimal string at DE
 850  83A7              N2ASCII_DEC:
 851  83A7 01 F0 D8     	ld bc, -10000
 852  83AA CD C2 83     	call DigitLoop
 853  83AD 01 18 FC     	ld bc, -1000
 854  83B0 CD C2 83     	call DigitLoop
 855  83B3              N2ASCII_DEC3:
 856  83B3 01 9C FF     	ld bc, -100
 857  83B6 CD C2 83     	call DigitLoop
 858  83B9 01 F6 FF     	ld bc, -10
 859  83BC CD C2 83     	call DigitLoop
 860  83BF 01 FF FF     	ld bc, -1
 861  83C2
 862  83C2              DigitLoop:
 863  83C2 3E 2F        	ld	a, '0' - 1
 864  83C4              DivNrLoop:
 865  83C4 3C           	inc	a			;increase reminder
 866  83C5 09           	add	hl, bc		;substract divizor
 867  83C6 38 FC        	jr	c, DivNrLoop	;still dividing?
 868  83C8 ED 42        	sbc	hl, bc		;nope, restore
 869  83CA
 870  83CA 12           	ld (de), a
 871  83CB 13           	inc de
 872  83CC C9           	ret
 873  83CD
 874  83CD
 875  83CD              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Allocated Data ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 876  83CD
 877  83CD              FreeSpaceMsg:
 878  83CD 14 01        				DEFB	CLR_CODE_INVERSE, 1
 879  83CF 13 01        				DEFB	CLR_CODE_BRIGHT, 1
 880  83D1 11 01        				DEFB	CLR_CODE_PAPER, CLR_BLUE
 881  83D3 10 06        				DEFB	CLR_CODE_INK, CLR_YELLOW
 882  83D5 50 61 67 65  				DEFB	"Page"
 883  83D9 31 2F        ScrPageMsg		DEFB	"1/"
 884  83DB 31           ScrPageMsgMax	DEFB	"1"
 885  83DC 10 05 4E 61  				DEFB	CLR_CODE_INK, CLR_NAME, "Name"
 885  83E0 6D 65
 886  83E2 10 06 4C 65  				DEFB	CLR_CODE_INK, CLR_LEN, "Len B"
 886  83E6 6E 20 42
 887  83E9 10 02 2B 52  				DEFB    CLR_CODE_INK, CLR_RO, "+R/O"
 887  83ED 2F 4F
 888  83EF 10 03 2B 53  				DEFB 	CLR_CODE_INK, CLR_SYS, "+SYS"
 888  83F3 59 53
 889  83F5 10 04 2B 52  				DEFB 	CLR_CODE_INK, CLR_RO_SYS, "+R/O+SYS"
 889  83F9 2F 4F 2B 53
 889  83FD 59 53
 890  83FF
 891  83FF 10 05        				DEFB	CLR_CODE_INK, CLR_CYAN
 892  8401 41 3A 20     MsgDrive		DEFB	"A: "
 893  8404 10 02        				DEFB	CLR_CODE_INK, CLR_RED
 894  8406 20 20 20 4B  UsedSpaceAsc	DEFM	"   KB/"
 894  840A 42 2F
 895  840C 20 20 20 20  FileCntMsg		DEFM    "    files,"
 895  8410 66 69 6C 65
 895  8414 73 2C
 896  8416 10 04        				DEFB	CLR_CODE_INK, CLR_GREEN
 897  8418 20 20 20 4B  FreeSpaceAsc	DEFM	"   KB/"
 897  841C 42 2F
 898  841E 20 20 20 20  UsedCatMsg		DEFM 	"    dir"
 898  8422 64 69 72
 899  8425              FreeSpaceMsgEnd:
 900  8425
 901  8425
 902  8425
 903  8425              DisplayedLine:
 904  8425 17           				DEFB	CLR_CODE_TAB						;tab
 905  8426 00 00        TabChar			DEFB	0, 0
 906  8428 11 01        				DEFB	CLR_CODE_PAPER, CLR_BLUE
 907  842A 13           				DEFM	CLR_CODE_BRIGHT
 908  842B 00           DisplayedBright	DEFB	0				;bright is alternating
 909  842C 10           				DEFB	CLR_CODE_INK
 910  842D 05           FileNameClr		DEFB	CLR_NAME
 911  842E 3F 3F 3F 3F  FileName		DEFM	"???????????"
 911  8432 3F 3F 3F 3F
 911  8436 3F 3F 3F
 912  8439 10 06        				DEFB	CLR_CODE_INK, CLR_LEN
 913  843B 20 20 20 20  FileLen			DEFB	"     "
 913  843F 20
 914  8440              DisplayedLineEnd:
 915  8440
 916  8440              ;the search mask
 917  8440 3F 3F 3F 3F  FileMask		DEFM	"???????????"
 917  8444 3F 3F 3F 3F
 917  8448 3F 3F 3F
 918  844B 01           DRIVE_SELECTED	DEFB	DRIVE_A		;0=A:, 1=B: for BDOS, 0 = use current drive for BASIC; can be poked with the desired drive, it's the last byte in block
 919  844C              END
 920  844C
 921  844C              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Unalocated Variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 922  844C
 923  844C              FileCnt			EQU		DRIVE_SELECTED + 1		;file index for display
 924  844C              UsedKB			EQU		FileCnt + 1
 925  844C              FreeCatalog		EQU		UsedKB + 2
 926  844C              Cache			EQU		FreeCatalog + 1				;here goes the cache table
 927  844C
 928  844C              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Constants ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 929  844C
 930  844C              START_ADDR		EQU	$8000		;Start address
 931  844C
 932  844C              ;System variables for disk
 933  844C              VAR_DSTR1		EQU	$5CD6		;drive
 934  844C              VAR_FSTR1		EQU	$5CDC		;file name
 935  844C              VAR_NSTR1		EQU	$5CDA		;name length
 936  844C              VAR_HD11		EQU	$5CED		;BDOS argument
 937  844C              VAR_COPIES		EQU	$5CEF		;BDOS function
 938  844C              VAR_IOBORD		EQU	23750		;IO border
 939  844C
 940  844C              VAR_SCROLL		EQU	23692
 941  844C              VAR_SCROLL2		EQU	23659
 942  844C              VAR_BORDER		EQU	$5C47
 943  844C              VAR_ERRSP		EQU $5C3D
 944  844C              VAR_ERRNR		EQU $5C3A
 945  844C
 946  844C              DRIVE_CURRENT	EQU 0
 947  844C              DRIVE_A			EQU	1
 948  844C              DRIVE_B			EQU	2
 949  844C
 950  844C              ;File name stuff
 951  844C              NAMELEN			EQU	11			;name length
 952  844C              ATTR_RO_POS		EQU	8			;read-only attribute position in name
 953  844C              ATTR_SYS_POS	EQU	9			;system attribute position in name
 954  844C
 955  844C              ;Disk geometry stuff
 956  844C              SPT				EQU	16			;sectors per track
 957  844C              SECT_SZ			EQU	256			;sector size in bytes
 958  844C              TRACK_CNT		EQU	80			;track count
 959  844C              HEAD_CNT		EQU	2			;disk face count
 960  844C              AU_SZ			EQU	2048		;allocation unit size in bytes
 961  844C              DIR_ENT_SZ		EQU	32			;directory entry size
 962  844C              DIR_TRK_CNT		EQU	1			;tracks rezerved for directory
 963  844C              SPAL			EQU	(AU_SZ/SECT_SZ);sectors per allocation unit
 964  844C              MAX_DIR_ENT		EQU	(SPT * DIR_TRK_CNT * SECT_SZ / DIR_ENT_SZ);maximum directory entries
 965  844C              MAX_AU_CNT		EQU	(TRACK_CNT * HEAD_CNT * SPT * SECT_SZ)/AU_SZ
 966  844C              MAX_FREE_AU_CNT	EQU	((TRACK_CNT * HEAD_CNT - DIR_TRK_CNT) * SPT * SECT_SZ)/AU_SZ ;max free allocation units
 967  844C              REC_SZ			EQU 128			;cp/m record size
 968  844C              FINISH_CHR		EQU $1A			;file terminator char
 969  844C
 970  844C              ;File header offsets
 971  844C              HDR_TYPE		EQU	0
 972  844C              HDR_LEN			EQU 1
 973  844C              HDR_ADDR		EQU 3
 974  844C              HDR_VAR			EQU	5
 975  844C              HDR_LINE		EQU 7
 976  844C              HDR_SIZE		EQU 9
 977  844C
 978  844C              ;Disk cache table structure
 979  844C              CACHE_NAME		EQU 0
 980  844C              CACHE_RC_CNT	EQU NAMELEN
 981  844C              CACHE_LN_SZ		EQU NAMELEN +2
 982  844C
 983  844C              ;BASIC disk channel structure
 984  844C              CH_RW_FLAG		EQU 11
 985  844C              CH_FCB			EQU	12
 986  844C              CH_DATA			EQU	50
 987  844C              CH_DMA			EQU CH_DATA - CH_FCB	;offset of DMA from start of FCB
 988  844C
 989  844C              ;Extension structure (directory entry)
 990  844C              EXT_DEL_FLAG	EQU	0
 991  844C              EXT_NAME		EQU 1
 992  844C              EXT_IDX			EQU 12
 993  844C              EXT_S1			EQU 13
 994  844C              EXT_S2			EQU 14
 995  844C              EXT_RC			EQU	15
 996  844C              EXT_AU0			EQU	16
 997  844C              EXT_AU1			EQU	18
 998  844C              EXT_AU2			EQU	20
 999  844C              EXT_AU3			EQU	22
1000  844C              EXT_AU4			EQU	24
1001  844C              EXT_AU5			EQU	26
1002  844C              EXT_AU6			EQU	28
1003  844C              EXT_AU7			EQU	30
1004  844C              EXT_AU_CNT		EQU 8
1005  844C
1006  844C              ;FCB structure
1007  844C              FCB_DRIVE		EQU 0			;0 is current drive
1008  844C              FCB_NAME		EQU EXT_NAME
1009  844C              FCB_EX_IDX		EQU EXT_IDX
1010  844C              FCB_S1			EQU EXT_S1
1011  844C              FCB_S2			EQU EXT_S2
1012  844C              FCB_RC			EQU	EXT_RC
1013  844C              FCB_AU			EQU	EXT_AU0
1014  844C              FCB_CR			EQU	32
1015  844C              FCB_R0			EQU 33
1016  844C              FCB_R1			EQU 34
1017  844C              FCB_R2			EQU 35
1018  844C
1019  844C              ROM_OPEN_SCR	EQU	$1601
1020  844C              ROM_OPEN_SCR_CLR	EQU	$0DAF
1021  844C              ROM_PRINT		EQU $203C		;DE = string, BC = len
1022  844C
1023  844C              CLR_CODE_INK	EQU 16
1024  844C              CLR_CODE_PAPER	EQU 17
1025  844C              CLR_CODE_BRIGHT EQU	19
1026  844C              CLR_CODE_INVERSE EQU	20
1027  844C              CLR_CODE_TAB	EQU 23
1028  844C
1029  844C              CLR_BLACK		EQU	0
1030  844C              CLR_BLUE		EQU	1
1031  844C              CLR_RED			EQU	2
1032  844C              CLR_MAGENTA		EQU	3
1033  844C              CLR_GREEN		EQU	4
1034  844C              CLR_CYAN		EQU	5
1035  844C              CLR_YELLOW		EQU	6
1036  844C              CLR_WHITE		EQU	7
1037  844C
1038  844C              CLR_NAME		EQU CLR_CYAN
1039  844C              CLR_RO			EQU	CLR_RED
1040  844C              CLR_SYS			EQU	CLR_MAGENTA
1041  844C              CLR_RO_SYS		EQU	CLR_GREEN
1042  844C              CLR_LEN			EQU	CLR_YELLOW
1043  844C
1044  844C              ;key codes
1045  844C              KEY_ESC			EQU	7
1046  844C              KEY_LEFT		EQU	8
1047  844C              KEY_RIGHT		EQU	9
1048  844C              KEY_DOWN		EQU	10
1049  844C              KEY_UP			EQU	11
1050  844C              KEY_ENTER		EQU	13
1051  844C              KEY_CTRL		EQU	14
1052  844C
1053  844C              MAX_FILES_SCR	EQU	44
1054  844C
1055  844C
1056  844C              				EMPTYTAP "cat.tap"
1057  844C              				savetap "cat.tap", CODE, "run", start, END-start
1058  844C              ;				savebin "cat.bin", start, END-start
1059  844C
# file closed: D:\Spectrum\src\HC\HCRun\cat.ASM

Value    Label
------ - -----------------------------------------------------------
0x000E X KEY_CTRL
0x000D X KEY_ENTER
0x0007 X CLR_WHITE
0x0003   CLR_MAGENTA
0x0000 X CLR_BLACK
0x203C X ROM_PRINT
0x0023 X FCB_R2
0x0022 X FCB_R1
0x0021 X FCB_R0
0x0020 X FCB_CR
0x0010 X FCB_AU
0x000E X FCB_S2
0x000D X FCB_S1
0x0001 X FCB_NAME
0x0000 X FCB_DRIVE
0x0008 X EXT_AU_CNT
0x001E X EXT_AU7
0x001C X EXT_AU6
0x001A X EXT_AU5
0x0018 X EXT_AU4
0x0016 X EXT_AU3
0x0014 X EXT_AU2
0x0012 X EXT_AU1
0x0010   EXT_AU0
0x000F   EXT_RC
0x000E   EXT_S2
0x000D   EXT_S1
0x000C   EXT_IDX
0x0001   EXT_NAME
0x0000 X EXT_DEL_FLAG
0x0032   CH_DATA
0x000B X CH_RW_FLAG
0x000B X CACHE_RC_CNT
0x0000 X CACHE_NAME
0x0009 X HDR_SIZE
0x0007 X HDR_LINE
0x0005 X HDR_VAR
0x0003 X HDR_ADDR
0x0001 X HDR_LEN
0x0000 X HDR_TYPE
0x001A X FINISH_CHR
0x0080 X REC_SZ
0x0140 X MAX_AU_CNT
0x0008 X SPAL
0x0001   DIR_TRK_CNT
0x0020   DIR_ENT_SZ
0x0002   HEAD_CNT
0x0050   TRACK_CNT
0x0100   SECT_SZ
0x0010   SPT
0x0000 X DRIVE_CURRENT
0x5C3A X VAR_ERRNR
0x5C3D X VAR_ERRSP
0x5C47 X VAR_BORDER
0x5C8C X VAR_SCROLL
0x5CC6 X VAR_IOBORD
0x844C X END
0x0017   CLR_CODE_TAB
0x0004   CLR_GREEN
0x0002   CLR_RED
0x0005   CLR_CYAN
0x0006   CLR_LEN
0x0006   CLR_YELLOW
0x0010   CLR_CODE_INK
0x0001   CLR_BLUE
0x0011   CLR_CODE_PAPER
0x0013   CLR_CODE_BRIGHT
0x0014   CLR_CODE_INVERSE
0x83C4   DivNrLoop
0x83C2   DigitLoop
0x83A3   NextChar
0x83A2   MarkNon0
0x8391 X StrippLeading0
0x83A7   N2ASCII_DEC
0x8394   StrippLoop
0x83B3   N2ASCII_DEC3
0x8425   FreeSpaceMsgEnd
0x83CD   FreeSpaceMsg
0x8374 X PrintStats
0x841E   UsedCatMsg
0x8401   MsgDrive
0x840C   FileCntMsg
0x8418   FreeSpaceAsc
0x0800   AU_SZ
0x013E   MAX_FREE_AU_CNT
0x8406   UsedSpaceAsc
0x832B   FindCacheLoop
0x000F   FCB_RC
0x8328   FindCache
0x831D   Cat2Index0
0x8324   CatEnd2
0x82E3   CatNext2
0x82C8   CatEnd
0x8292   CatNext
0x000C   FCB_EX_IDX
0x8440   FileMask
0x842D   FileNameClr
0x0004   CLR_RO_SYS
0x0003   CLR_SYS
0x8272   BothAttr
0x8274   NotSys
0x0009   ATTR_SYS_POS
0x0002   CLR_RO
0x8260   NotRO
0x0008   ATTR_RO_POS
0x0005   CLR_NAME
0x8440   DisplayedLineEnd
0x8425   DisplayedLine
0x8228   GoodChar
0x821F   FileNameCopy
0x8252   CheckAttributes
0x842E   FileName
0x8201   DisplayLoop
0x5C6B   VAR_SCROLL2
0x1601   ROM_OPEN_SCR
0x81F3   DisplayFilesInfo
0x81DA   FindCacheLineLoop
0x81DD   ListReady
0x000D   CACHE_LN_SZ
0x81BC X Page1of3
0x81C2   Page2of3
0x81C8   Page3of3
0x81A5 X Page1of2
0x81AB   Page2of2
0x81D0   FindCacheLine
0x81B3   ThreeScreensMax
0x81A0   TwoScreensMax
0x819C   OneScreenMax
0x0002   DRIVE_B
0x8166   SwitchDrive
0x8164   SelectDriveB
0x8160   SelectDriveA
0x0008   KEY_LEFT
0x0009   KEY_RIGHT
0x817A   PrevScr
0x000B   KEY_UP
0x816D   NextScr
0x000A   KEY_DOWN
0x0007   KEY_ESC
0x8140   ReadCharLoop
0x81DF   DisplayOneScreen
0x8185   GetFileListForScreen
0x842B   DisplayedBright
0x8426   TabChar
0x8133   DisplayFilesLoop
0x002C   MAX_FILES_SCR
0x812D   ScreenCntLoop
0x833D   DisplayStats
0x812A   NonEmptyDisk
0x83DB   ScrPageMsgMax
0x83D9   ScrPageMsg
0x8382   N2ASCII3
0x838C   N2ASCII5
0x843B   FileLen
0x8103   BigFile
0x80E8   DisplayFileLength
0x80E3   NoPartialAU
0x80CA   GetFileSizeOnDiskKB
0x000B   NAMELEN
0x80AE   FileSizeLoop
0x8450   Cache
0x0026   CH_DMA
0x8098   SetDMA
0x8094   FindNext
0x8090   FindFirst
0x844B   DRIVE_SELECTED
0x807A X InitDos
0x5CEF   VAR_COPIES
0x5CED   VAR_HD11
0x8070   BDOS
0x8068   DestroyChannel
0x000C   CH_FCB
0x5CDA   VAR_NSTR1
0x5CD6   VAR_DSTR1
0x5CDC   VAR_FSTR1
0x8053   CreateChannel
0x0DAF   ROM_OPEN_SCR_CLR
0x844F   FreeCatalog
0x0080   MAX_DIR_ENT
0x844C   FileCnt
0x844D   UsedKB
0x807E   SelectDrive
0x0001   DRIVE_A
0x8039   SelectDriveInit
0x8037   CurrentDriveNone
0x808C   GetCurrentDrive
0x8050   InitVars
0x8027   MisMatch
0x801F   Compare
0x801D   StrCmp
0x8013   PrintStr
0x8010   ReadChar
0x8115   DisplayFiles
0x80A7   GetDiskUsedSpace
0x82CC   ReadCatalog2
0x8278   ReadCatalog1
0x8003 X ReadDiskAgain
0x802A   Init
0x8000   start
0x8000   START_ADDR
